from Card import Card
from Deck import Deck
from Storage import DATA_PATH, load_data, save_data


def main():
    while True:
        data = load_data(DATA_PATH)
        decks = [Deck.fromDict(d) for d in data.get("decks", [])]
        print("\n === –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FLASHCARDS ü¶∏üèª‚Äç‚ôÇÔ∏è")
        print("1 - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–ª–æ–¥—ã")
        print("2 - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–¥—É")
        print("3 - –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–¥—É")
        print("4 - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏")

        choice = int(input("–í–∞—à –≤—ã–±–æ—Ä: "))

        if choice == 1:
            if not len(decks):
                print("–ü—É—Å—Ç–∞—è –∫–æ–ª–æ–¥–∞")
                continue
            for idx, val in enumerate(decks):
                print(f"{idx + 1} - {val.title}")

        elif choice == 2:
            title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã: ")
            decks.append(Deck(title))
            save_data(DATA_PATH, {"decks": [deck.toDict() for deck in decks]})
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

        elif choice == 3:
            for idx, val in enumerate(decks):
                print(f"{idx + 1} - {val.title}")
            try:
                idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–ª–æ–¥—ã: ")) - 1
                if 0 <= idx < len(decks):
                    deck_menu(decks[idx], decks)
                else:
                    print("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

        elif choice == 4:
            save_data(DATA_PATH, {"decks": [deck.toDict() for deck in decks]})
            print("–í—Å–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –¥–æ—Å–≤–∏–¥–∞–Ω–∏—è üëãüèª")
            break


def deck_menu(deck, decks):
    while True:
        print("1 - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        print("2 - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É")
        print("3 - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        print("4 - –í—ã–π—Ç–∏")

        choice = int(input("–í–∞—à –≤—ã–±–æ—Ä: "))

        if choice == 1:
            if not deck.cards:
                print("–ü—É—Å—Ç–∞—è –∫–æ–ª–æ–¥–∞, –¥–æ–±–∞–≤—å—Ç–µ —á—Ç–æ –Ω–∏–±—É–¥—å üí¨")
            else:
                for idx, val in enumerate(deck.cards):
                    print(
                        f"Question {idx + 1}: {val.question}, Answer: {val.answer}, Success rate: {val.success_rate}"
                    )

        elif choice == 2:
            new_q = input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å: ")
            new_a = input("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç: ")
            deck.addCard(new_q, new_a)
            save_data(DATA_PATH, {"decks": [deck.toDict() for deck in decks]})
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞")

        elif choice == 3:
            deck.train()
            save_data(DATA_PATH, {"decks": [deck.toDict() for deck in decks]})

        elif choice == 4:
            break

        else:
            print("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")


if __name__ == "__main__":
    main()
